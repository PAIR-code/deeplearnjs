{"dependencies":[{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1529003832385},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1530637734514}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EncodeFloatProgram = function () {\n    function EncodeFloatProgram(outputShape) {\n        this.variableNames = ['A'];\n        this.outputShape = outputShape;\n        this.userCode = \"\\n      const float FLOAT_MAX = 1.70141184e38;\\n      const float FLOAT_MIN = 1.17549435e-38;\\n\\n      lowp vec4 encode_float(highp float v) {\\n        if (isNaN(v)) {\\n          return vec4(255, 255, 255, 255);\\n        }\\n\\n        highp float av = abs(v);\\n\\n        if(av < FLOAT_MIN) {\\n          return vec4(0.0, 0.0, 0.0, 0.0);\\n        } else if(v > FLOAT_MAX) {\\n          return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\\n        } else if(v < -FLOAT_MAX) {\\n          return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\\n        }\\n\\n        highp vec4 c = vec4(0,0,0,0);\\n\\n        highp float e = floor(log2(av));\\n        highp float m = exp2(fract(log2(av))) - 1.0;\\n\\n        c[2] = floor(128.0 * m);\\n        m -= c[2] / 128.0;\\n        c[1] = floor(32768.0 * m);\\n        m -= c[1] / 32768.0;\\n        c[0] = floor(8388608.0 * m);\\n\\n        highp float ebias = e + 127.0;\\n        c[3] = floor(ebias / 2.0);\\n        ebias -= c[3] * 2.0;\\n        c[2] += floor(ebias) * 128.0;\\n\\n        c[3] += 128.0 * step(0.0, -v);\\n\\n        return c / 255.0;\\n      }\\n\\n      void main() {\\n        float x = getAAtOutCoords();\\n        gl_FragColor = encode_float(x);\\n      }\\n    \";\n    }\n    return EncodeFloatProgram;\n}();\nexports.EncodeFloatProgram = EncodeFloatProgram;","map":{"mappings":[{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":4,"column":0}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":4,"column":4}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":4,"column":25}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":4,"column":37}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":5,"column":0}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":5,"column":13}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":5,"column":31}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":25,"column":14},"generated":{"line":5,"column":32}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":5,"column":43}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":25,"column":35},"generated":{"line":5,"column":45}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":6,"column":0}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":6,"column":13}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":6,"column":26}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":21,"column":18},"generated":{"line":6,"column":29}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":21,"column":19},"generated":{"line":6,"column":30}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":21,"column":18},"generated":{"line":6,"column":33}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":6,"column":34}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":26,"column":4},"generated":{"line":7,"column":0}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":26,"column":9},"generated":{"line":7,"column":13}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":26,"column":4},"generated":{"line":7,"column":24}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":26,"column":23},"generated":{"line":7,"column":27}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":26,"column":4},"generated":{"line":7,"column":38}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":27,"column":4},"generated":{"line":8,"column":0}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":27,"column":9},"generated":{"line":8,"column":13}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":27,"column":4},"generated":{"line":8,"column":21}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":27,"column":20},"generated":{"line":8,"column":24}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":27,"column":4},"generated":{"line":8,"column":1208}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":72,"column":3},"generated":{"line":9,"column":0}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":73,"column":0},"generated":{"line":10,"column":0}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":73,"column":0},"generated":{"line":10,"column":11}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":73,"column":0},"generated":{"line":10,"column":29}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":11,"column":0}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":11,"column":1}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":11,"column":3}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":20,"column":13},"generated":{"line":12,"column":0}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":20,"column":13},"generated":{"line":12,"column":8}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":20,"column":13},"generated":{"line":12,"column":26}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":20,"column":13},"generated":{"line":12,"column":29}},{"source":"../src/kernels/webgl/encode_float_gpu.ts","name":null,"original":{"line":20,"column":13},"generated":{"line":12,"column":47}}],"sources":{"../src/kernels/webgl/encode_float_gpu.ts":"/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class EncodeFloatProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    this.userCode = `\n      const float FLOAT_MAX = 1.70141184e38;\n      const float FLOAT_MIN = 1.17549435e-38;\n\n      lowp vec4 encode_float(highp float v) {\n        if (isNaN(v)) {\n          return vec4(255, 255, 255, 255);\n        }\n\n        highp float av = abs(v);\n\n        if(av < FLOAT_MIN) {\n          return vec4(0.0, 0.0, 0.0, 0.0);\n        } else if(v > FLOAT_MAX) {\n          return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n        } else if(v < -FLOAT_MAX) {\n          return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n        }\n\n        highp vec4 c = vec4(0,0,0,0);\n\n        highp float e = floor(log2(av));\n        highp float m = exp2(fract(log2(av))) - 1.0;\n\n        c[2] = floor(128.0 * m);\n        m -= c[2] / 128.0;\n        c[1] = floor(32768.0 * m);\n        m -= c[1] / 32768.0;\n        c[0] = floor(8388608.0 * m);\n\n        highp float ebias = e + 127.0;\n        c[3] = floor(ebias / 2.0);\n        ebias -= c[3] * 2.0;\n        c[2] += floor(ebias) * 128.0;\n\n        c[3] += 128.0 * step(0.0, -v);\n\n        return c / 255.0;\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        gl_FragColor = encode_float(x);\n      }\n    `;\n  }\n}\n"},"lineCount":null}},"hash":"5ec27196f0528c98c512904c45056cf7","cacheData":{"env":{}}}